diff -crB KMP_original//src/kmpbase.cpp KMP//src/kmpbase.cpp
*** KMP_original//src/kmpbase.cpp	2010-05-08 18:30:05.000000000 +0200
--- KMP//src/kmpbase.cpp	2010-05-11 15:58:13.043769057 +0200
***************
*** 1,7 ****
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
!     
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
--- 1,7 ----
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
! 
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
***************
*** 37,43 ****
  #include <QFile>
  #include <phonon/videowidget.h>
  #include <phonon/backendcapabilities.h>
! #include <Phonon/Effect>
  #include <phonon/effectparameter.h>
  #include <phonon/phononnamespace.h>
  #include <phonon/audiooutput.h>
--- 37,43 ----
  #include <QFile>
  #include <phonon/videowidget.h>
  #include <phonon/backendcapabilities.h>
! //#include <Phonon/Effect>
  #include <phonon/effectparameter.h>
  #include <phonon/phononnamespace.h>
  #include <phonon/audiooutput.h>
***************
*** 46,52 ****
  #include <phonon/volumeslider.h>
  #include <phonon/backendcapabilities.h>
  #include <phonon/objectdescriptionmodel.h>
! #include <Phonon/SubtitleDescription>
  #include <kfiledialog.h>
  #include <kurl.h>
  #include <kfile.h>
--- 46,52 ----
  #include <phonon/volumeslider.h>
  #include <phonon/backendcapabilities.h>
  #include <phonon/objectdescriptionmodel.h>
! //#include <Phonon/SubtitleDescription>
  #include <kfiledialog.h>
  #include <kurl.h>
  #include <kfile.h>
***************
*** 104,114 ****
      connect(m_media, SIGNAL(stateChanged(Phonon::State, Phonon::State)), this, SLOT(stateChanged(Phonon::State, Phonon::State)));
      connect(m_media, SIGNAL(aboutToFinish()), this, SLOT(aboutToFinish()));
      connect(m_media, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(currentSourceChanged(Phonon::MediaSource)));
!     
      ui_kmp_base.setupUi(this);
!     
      ui_kmp_base.seekSlider->setMediaObject(m_media);
!     
      multimedia = new KMPMultimedia();
      currentPlaylist = new KMPPlaylist();
      multimedia->currentPlaylist = currentPlaylist;
--- 104,114 ----
      connect(m_media, SIGNAL(stateChanged(Phonon::State, Phonon::State)), this, SLOT(stateChanged(Phonon::State, Phonon::State)));
      connect(m_media, SIGNAL(aboutToFinish()), this, SLOT(aboutToFinish()));
      connect(m_media, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(currentSourceChanged(Phonon::MediaSource)));
! 
      ui_kmp_base.setupUi(this);
! 
      ui_kmp_base.seekSlider->setMediaObject(m_media);
! 
      multimedia = new KMPMultimedia();
      currentPlaylist = new KMPPlaylist();
      multimedia->currentPlaylist = currentPlaylist;
***************
*** 118,124 ****
      MultimediaPages->addWidget(new KMPMediaInformationPage(this, multimedia));
      collectionPage = new KMPCollectionPage(this, multimedia);
      MultimediaPages->addWidget(collectionPage);
!     
      Phonon::createPath(m_media, videoWidget);
      videoWidget->setVideoSettings(Settings::video_brightness(), Settings::video_contrast(), Settings::video_hue(), Settings::video_saturation());
      connect(videoWidget, SIGNAL(FullwindowRequest()), SLOT(FullwindowRequest()));
--- 118,124 ----
      MultimediaPages->addWidget(new KMPMediaInformationPage(this, multimedia));
      collectionPage = new KMPCollectionPage(this, multimedia);
      MultimediaPages->addWidget(collectionPage);
! 
      Phonon::createPath(m_media, videoWidget);
      videoWidget->setVideoSettings(Settings::video_brightness(), Settings::video_contrast(), Settings::video_hue(), Settings::video_saturation());
      connect(videoWidget, SIGNAL(FullwindowRequest()), SLOT(FullwindowRequest()));
***************
*** 128,137 ****
      connect(videoWidget, SIGNAL(backButtonClicked()), SLOT(BackButtonPressed()));
      connect(videoWidget, SIGNAL(playButtonClicked()), SLOT(PlayButtonPressed()));
      connect(videoWidget, SIGNAL(nextButtonClicked()), SLOT(NextButtonPressed()));
!     
      m_media->setTickInterval(500);
      connect(m_media, SIGNAL(tick(qint64)), this, SLOT(tick(qint64)));
!     
      QList<Phonon::EffectDescription> effects = Phonon::BackendCapabilities::availableAudioEffects();
       foreach (Phonon::EffectDescription effect, effects)
       {
--- 128,137 ----
      connect(videoWidget, SIGNAL(backButtonClicked()), SLOT(BackButtonPressed()));
      connect(videoWidget, SIGNAL(playButtonClicked()), SLOT(PlayButtonPressed()));
      connect(videoWidget, SIGNAL(nextButtonClicked()), SLOT(NextButtonPressed()));
! 
      m_media->setTickInterval(500);
      connect(m_media, SIGNAL(tick(qint64)), this, SLOT(tick(qint64)));
! 
      QList<Phonon::EffectDescription> effects = Phonon::BackendCapabilities::availableAudioEffects();
       foreach (Phonon::EffectDescription effect, effects)
       {
***************
*** 158,164 ****
       {
         KMessageBox::information(this, i18n("Equalizer wasn't found, probably you are using a backend that doesn't support it.\nChange to another backend (xine is supported) if you want to have equalizer.\nTo change backend open system settings, click \"Multimedia\" and in the page \"Backend\" you can choose another backend (if available)."), "Equalizer isn't available", "audioEqNotAvailable");
       }
!      
      if(audioEqualizerAvailable)
      {
        equalizer->setParameterValue(equalizer->parameters()[0], Settings::audio_preamp()/100*12);
--- 158,164 ----
       {
         KMessageBox::information(this, i18n("Equalizer wasn't found, probably you are using a backend that doesn't support it.\nChange to another backend (xine is supported) if you want to have equalizer.\nTo change backend open system settings, click \"Multimedia\" and in the page \"Backend\" you can choose another backend (if available)."), "Equalizer isn't available", "audioEqNotAvailable");
       }
! 
      if(audioEqualizerAvailable)
      {
        equalizer->setParameterValue(equalizer->parameters()[0], Settings::audio_preamp()/100*12);
***************
*** 172,186 ****
        equalizer->setParameterValue(equalizer->parameters()[8], Settings::audio_eq8()/100*12);
        equalizer->setParameterValue(equalizer->parameters()[9], Settings::audio_eq9()/100*12);
        equalizer->setParameterValue(equalizer->parameters()[10], Settings::audio_eq10()/100*12);
!       
        videoWidget->audioEqualizer = equalizer;
        videoWidget->updateEqualizer();
        connect(videoWidget, SIGNAL(resetAudioEqDefaults()), SLOT(resetAudioEqDefaults()));
        connect(videoWidget, SIGNAL(audioEqChanged()), SLOT(audioEqChanged()));
      }
!     
      LPlaylist->setModel(currentPlaylist);
!     
        collectionThread = new KMPCollectionThread(this);
        collectionThread->multimedia = multimedia;
        connect(collectionThread, SIGNAL(progressChanged(int,int)), SLOT(collectionThreadProgressChanged(int,int)));
--- 172,186 ----
        equalizer->setParameterValue(equalizer->parameters()[8], Settings::audio_eq8()/100*12);
        equalizer->setParameterValue(equalizer->parameters()[9], Settings::audio_eq9()/100*12);
        equalizer->setParameterValue(equalizer->parameters()[10], Settings::audio_eq10()/100*12);
! 
        videoWidget->audioEqualizer = equalizer;
        videoWidget->updateEqualizer();
        connect(videoWidget, SIGNAL(resetAudioEqDefaults()), SLOT(resetAudioEqDefaults()));
        connect(videoWidget, SIGNAL(audioEqChanged()), SLOT(audioEqChanged()));
      }
! 
      LPlaylist->setModel(currentPlaylist);
! 
        collectionThread = new KMPCollectionThread(this);
        collectionThread->multimedia = multimedia;
        connect(collectionThread, SIGNAL(progressChanged(int,int)), SLOT(collectionThreadProgressChanged(int,int)));
***************
*** 209,215 ****
        {
  	KMPMultimediaItem *NewMedia = new KMPMultimediaItem();
  	NewMedia->setURL(url);
! 	TagLib::FileRef *F = new TagLib::FileRef(url.toLocal8Bit());      
  	if ( !F->isNull() )
  	{
  	  NewMedia->setTagsAvailable(true);
--- 209,215 ----
        {
  	KMPMultimediaItem *NewMedia = new KMPMultimediaItem();
  	NewMedia->setURL(url);
! 	TagLib::FileRef *F = new TagLib::FileRef(url.toLocal8Bit());
  	if ( !F->isNull() )
  	{
  	  NewMedia->setTagsAvailable(true);
***************
*** 316,322 ****
      LMusicTitle->setText(multimedia->currentTitle());
      LInterpreter->setText(multimedia->currentArtist()->name);
      LAlbum->setText(multimedia->currentAlbum()->name);
!     
      if(!currentPlaylist->currentMedia()->Length().isNull())
      {
        if(currentPlaylist->currentMedia()->Length().hour()==0)
--- 316,322 ----
      LMusicTitle->setText(multimedia->currentTitle());
      LInterpreter->setText(multimedia->currentArtist()->name);
      LAlbum->setText(multimedia->currentAlbum()->name);
! 
      if(!currentPlaylist->currentMedia()->Length().isNull())
      {
        if(currentPlaylist->currentMedia()->Length().hour()==0)
***************
*** 325,331 ****
      }
      else
      { ui_kmp_base.LMediaLength->setText("0:00"); }
!   
      if(currentPlaylist->currentMedia()->startAt()!=0)
      {
        QTime currentTime((currentPlaylist->currentMedia()->startAt() / 3600000) % 60, (currentPlaylist->currentMedia()->startAt() / 60000) % 60, (currentPlaylist->currentMedia()->startAt() / 1000) % 60);
--- 325,331 ----
      }
      else
      { ui_kmp_base.LMediaLength->setText("0:00"); }
! 
      if(currentPlaylist->currentMedia()->startAt()!=0)
      {
        QTime currentTime((currentPlaylist->currentMedia()->startAt() / 3600000) % 60, (currentPlaylist->currentMedia()->startAt() / 60000) % 60, (currentPlaylist->currentMedia()->startAt() / 1000) % 60);
***************
*** 335,341 ****
      }
      else
      { ui_kmp_base.LCurrentTime->setText("0:00"); }
!     
      if(lastPlayed != -1)
      {
        if(currentPlaylist->mediaItems[lastPlayed])
--- 335,341 ----
      }
      else
      { ui_kmp_base.LCurrentTime->setText("0:00"); }
! 
      if(lastPlayed != -1)
      {
        if(currentPlaylist->mediaItems[lastPlayed])
***************
*** 353,366 ****
        }
      }
      lastPlayed = currentPlaylist->currentIndex();
!     
      //if(m_media->hasVideo())
!     //{ 
      if(Settings::general_savefilesettings())
!     { 
        if(currentPlaylist->currentMedia()->customVideoEqSettings())
        {
! 	videoWidget->setVideoSettings(currentPlaylist->currentMedia()->videoBrightness(), currentPlaylist->currentMedia()->videoContrast(), currentPlaylist->currentMedia()->videoHue(), currentPlaylist->currentMedia()->videoSaturation());  
        }
        else
        {
--- 353,366 ----
        }
      }
      lastPlayed = currentPlaylist->currentIndex();
! 
      //if(m_media->hasVideo())
!     //{
      if(Settings::general_savefilesettings())
!     {
        if(currentPlaylist->currentMedia()->customVideoEqSettings())
        {
! 	videoWidget->setVideoSettings(currentPlaylist->currentMedia()->videoBrightness(), currentPlaylist->currentMedia()->videoContrast(), currentPlaylist->currentMedia()->videoHue(), currentPlaylist->currentMedia()->videoSaturation());
        }
        else
        {
***************
*** 447,453 ****
  //       m_media->play();
  //       ui_kmp_base.LCurrentTime->setText("0:00");
  //       TagLib::FileRef *F = new TagLib::FileRef(fileNameFromDialog.toLocal8Bit());
! //       
  //       if ( !F->isNull() )
  //       {
  // 	LMusicTitle->setText(QString(F->tag()->title().toCString()));
--- 447,453 ----
  //       m_media->play();
  //       ui_kmp_base.LCurrentTime->setText("0:00");
  //       TagLib::FileRef *F = new TagLib::FileRef(fileNameFromDialog.toLocal8Bit());
! //
  //       if ( !F->isNull() )
  //       {
  // 	LMusicTitle->setText(QString(F->tag()->title().toCString()));
***************
*** 644,650 ****
      headContainer->setContentsMargins(1,1,1,1);
      KMPHeadWidget *kmpHead = new KMPHeadWidget(VisualizationContainer, multimedia);
      headContainer->addWidget(kmpHead);
!     
      CurrentMediaContainer = new KMPRectangleWidget(this);
      ui_kmp_base.MediaBar->addWidget(CurrentMediaContainer);
      CurrentMediaContainer->setMaximumHeight(60);
--- 644,650 ----
      headContainer->setContentsMargins(1,1,1,1);
      KMPHeadWidget *kmpHead = new KMPHeadWidget(VisualizationContainer, multimedia);
      headContainer->addWidget(kmpHead);
! 
      CurrentMediaContainer = new KMPRectangleWidget(this);
      ui_kmp_base.MediaBar->addWidget(CurrentMediaContainer);
      CurrentMediaContainer->setMaximumHeight(60);
***************
*** 676,690 ****
      LAlbum->setScaledContents(false);
      LAlbum->setTextInteractionFlags(Qt::TextSelectableByMouse);
      LAlbum->setTextElideMode(Qt::ElideRight);
!     LAlbum->setText("Album");    
      GAlbum = new QGraphicsView(CurrentMediaContainer);
      GAlbum->setObjectName(QString::fromUtf8("graphicsView"));
      GAlbum->setGeometry(QRect(5, 5, 50, 50));
!     
  //     MediaControls->SetOpacity(0.75);
  //     VisualizationContainer->SetOpacity(0.75);
  //     CurrentMediaContainer->SetOpacity(0.75);
!     
      ViewsBar = new KMPRectangleWidget(this);
      ui_kmp_base.MultimediaFrameLayout->addWidget(ViewsBar);
      ViewsBar->setStyleSheet(QString::fromUtf8("color: rgb(255, 255, 255);"));
--- 676,690 ----
      LAlbum->setScaledContents(false);
      LAlbum->setTextInteractionFlags(Qt::TextSelectableByMouse);
      LAlbum->setTextElideMode(Qt::ElideRight);
!     LAlbum->setText("Album");
      GAlbum = new QGraphicsView(CurrentMediaContainer);
      GAlbum->setObjectName(QString::fromUtf8("graphicsView"));
      GAlbum->setGeometry(QRect(5, 5, 50, 50));
! 
  //     MediaControls->SetOpacity(0.75);
  //     VisualizationContainer->SetOpacity(0.75);
  //     CurrentMediaContainer->SetOpacity(0.75);
! 
      ViewsBar = new KMPRectangleWidget(this);
      ui_kmp_base.MultimediaFrameLayout->addWidget(ViewsBar);
      ViewsBar->setStyleSheet(QString::fromUtf8("color: rgb(255, 255, 255);"));
***************
*** 718,738 ****
      BDevices->setFlat(true);
      BDevices->setText(i18n("Devices"));
      vbhl->addWidget(BDevices);
!     
      MultimediaPages = new QStackedWidget(this);
      ui_kmp_base.MultimediaFrameLayout->addWidget(MultimediaPages);
!     
      connect(BNowPlaying, SIGNAL(clicked(bool)), SLOT(BNowPlayingClicked(bool)));
      connect(BMediaInformation, SIGNAL(clicked(bool)), SLOT(BMediaInformationClicked(bool)));
      connect(BCollection, SIGNAL(clicked(bool)), SLOT(BCollectionClicked(bool)));
      connect(BInternet, SIGNAL(clicked(bool)), SLOT(BInternetClicked(bool)));
      connect(BDevices, SIGNAL(clicked(bool)), SLOT(BDevicesClicked(bool)));
!     
      LPlaylist = new KMPPlaylistWidget(this);
!     ui_kmp_base.PlaylistLayout->addWidget(LPlaylist);   
      connect(LPlaylist, SIGNAL(doubleClicked(QModelIndex)), SLOT(mediaItemDoubleClicked(QModelIndex)));
      connect(LPlaylist, SIGNAL(customContextMenuRequested(QPoint)), SLOT(mediaItemContextMenu(QPoint)));
!     
      KMPRectangleWidget *PlaylistControls = new KMPRectangleWidget(this);
      PlaylistControls->setMaximumHeight(45);
      PlaylistControls->setMinimumHeight(45);
--- 718,738 ----
      BDevices->setFlat(true);
      BDevices->setText(i18n("Devices"));
      vbhl->addWidget(BDevices);
! 
      MultimediaPages = new QStackedWidget(this);
      ui_kmp_base.MultimediaFrameLayout->addWidget(MultimediaPages);
! 
      connect(BNowPlaying, SIGNAL(clicked(bool)), SLOT(BNowPlayingClicked(bool)));
      connect(BMediaInformation, SIGNAL(clicked(bool)), SLOT(BMediaInformationClicked(bool)));
      connect(BCollection, SIGNAL(clicked(bool)), SLOT(BCollectionClicked(bool)));
      connect(BInternet, SIGNAL(clicked(bool)), SLOT(BInternetClicked(bool)));
      connect(BDevices, SIGNAL(clicked(bool)), SLOT(BDevicesClicked(bool)));
! 
      LPlaylist = new KMPPlaylistWidget(this);
!     ui_kmp_base.PlaylistLayout->addWidget(LPlaylist);
      connect(LPlaylist, SIGNAL(doubleClicked(QModelIndex)), SLOT(mediaItemDoubleClicked(QModelIndex)));
      connect(LPlaylist, SIGNAL(customContextMenuRequested(QPoint)), SLOT(mediaItemContextMenu(QPoint)));
! 
      KMPRectangleWidget *PlaylistControls = new KMPRectangleWidget(this);
      PlaylistControls->setMaximumHeight(45);
      PlaylistControls->setMinimumHeight(45);
***************
*** 740,747 ****
      PlaylistControls->SetTopColor(0.4);
      PlaylistControls->SetType(3);
      PlaylistControls->SetRadius(2);
!     
!     ui_kmp_base.PlaylistLayout->addWidget(PlaylistControls);    
      QHBoxLayout *vbhlpc = new QHBoxLayout(PlaylistControls);
      vbhlpc->setContentsMargins(10, 5, 12, 5);
      vbhlpc->setSpacing(0);
--- 740,747 ----
      PlaylistControls->SetTopColor(0.4);
      PlaylistControls->SetType(3);
      PlaylistControls->SetRadius(2);
! 
!     ui_kmp_base.PlaylistLayout->addWidget(PlaylistControls);
      QHBoxLayout *vbhlpc = new QHBoxLayout(PlaylistControls);
      vbhlpc->setContentsMargins(10, 5, 12, 5);
      vbhlpc->setSpacing(0);
***************
*** 777,790 ****
      BSavePlaylist->setIcon(KIcon(KStandardDirs::locate("data", "kmp/icons/kmpsave.png")));
      BSavePlaylist->setToolTip(i18n("Save playlist (not available yet)"));
      //BSavePlaylist->setIcon(KIcon("document-save"));
!     vbhlpc->addWidget(BSavePlaylist);    
      QSpacerItem *pcseparator = new QSpacerItem(40, 10, QSizePolicy::Expanding, QSizePolicy::Minimum);
      vbhlpc->addItem(pcseparator);
      PlaylistInfo = new QLabel(ViewsBar);
      PlaylistInfo->setAlignment(Qt::AlignHCenter | Qt::AlignCenter);
      PlaylistInfo->setText("<p style=\"color:white\"><b>0 Media</b><br/>0:00</p>");
      vbhlpc->addWidget(PlaylistInfo);
!     
      //Actions
      editLyricsAction = new KAction(KIcon("view-media-lyrics"), i18n("Edit lyrics..."), this);
      connect(editLyricsAction, SIGNAL(triggered(Qt::MouseButtons,Qt::KeyboardModifiers)), SLOT(openLyricsEditor(Qt::MouseButtons,Qt::KeyboardModifiers)));
--- 777,790 ----
      BSavePlaylist->setIcon(KIcon(KStandardDirs::locate("data", "kmp/icons/kmpsave.png")));
      BSavePlaylist->setToolTip(i18n("Save playlist (not available yet)"));
      //BSavePlaylist->setIcon(KIcon("document-save"));
!     vbhlpc->addWidget(BSavePlaylist);
      QSpacerItem *pcseparator = new QSpacerItem(40, 10, QSizePolicy::Expanding, QSizePolicy::Minimum);
      vbhlpc->addItem(pcseparator);
      PlaylistInfo = new QLabel(ViewsBar);
      PlaylistInfo->setAlignment(Qt::AlignHCenter | Qt::AlignCenter);
      PlaylistInfo->setText("<p style=\"color:white\"><b>0 Media</b><br/>0:00</p>");
      vbhlpc->addWidget(PlaylistInfo);
! 
      //Actions
      editLyricsAction = new KAction(KIcon("view-media-lyrics"), i18n("Edit lyrics..."), this);
      connect(editLyricsAction, SIGNAL(triggered(Qt::MouseButtons,Qt::KeyboardModifiers)), SLOT(openLyricsEditor(Qt::MouseButtons,Qt::KeyboardModifiers)));
***************
*** 851,863 ****
  void KMP_Base::BDevicesClicked(bool checked)
  {
    KMessageBox::information(this, "Settings file: " + currentPlaylist->currentMedia()->settingsFile(), "Testing stuff");
! 			       
  }
  
  void KMP_Base::saveMediaSettings(KMPMultimediaItem* itemtosave)
  {
    QString datatosave = "";
!   
    if(!itemtosave->tagsAvailable() && !itemtosave->fromCollection())
    {
      datatosave += "title="+itemtosave->Title()+"\n";
--- 851,863 ----
  void KMP_Base::BDevicesClicked(bool checked)
  {
    KMessageBox::information(this, "Settings file: " + currentPlaylist->currentMedia()->settingsFile(), "Testing stuff");
! 
  }
  
  void KMP_Base::saveMediaSettings(KMPMultimediaItem* itemtosave)
  {
    QString datatosave = "";
! 
    if(!itemtosave->tagsAvailable() && !itemtosave->fromCollection())
    {
      datatosave += "title="+itemtosave->Title()+"\n";
***************
*** 886,895 ****
      }
    }
    datatosave += "\n";
!   
    QFile settingsFile(itemtosave->settingsFile());
    settingsFile.open(QIODevice::WriteOnly | QIODevice::Text);
!   
    QTextStream out(&settingsFile);
    out << datatosave;
  }
--- 886,895 ----
      }
    }
    datatosave += "\n";
! 
    QFile settingsFile(itemtosave->settingsFile());
    settingsFile.open(QIODevice::WriteOnly | QIODevice::Text);
! 
    QTextStream out(&settingsFile);
    out << datatosave;
  }
***************
*** 897,911 ****
  void KMP_Base::readMediaSettings(KMPMultimediaItem* itemtochange)
  {
    QFile settingsFile(itemtochange->settingsFile());
!   
    if (!settingsFile.open(QIODevice::ReadOnly))
    { return; }
!   
    itemtochange->setCustomVideoEqSettings(true);
    itemtochange->setCustomAudioEqSettings(true);
!   
    QString filecontents = QTextStream( &settingsFile ).readAll();
!   
    QStringList lines(filecontents.split('\n', QString::SkipEmptyParts));
    foreach(QString currentline, lines)
    {
--- 897,911 ----
  void KMP_Base::readMediaSettings(KMPMultimediaItem* itemtochange)
  {
    QFile settingsFile(itemtochange->settingsFile());
! 
    if (!settingsFile.open(QIODevice::ReadOnly))
    { return; }
! 
    itemtochange->setCustomVideoEqSettings(true);
    itemtochange->setCustomAudioEqSettings(true);
! 
    QString filecontents = QTextStream( &settingsFile ).readAll();
! 
    QStringList lines(filecontents.split('\n', QString::SkipEmptyParts));
    foreach(QString currentline, lines)
    {
***************
*** 960,966 ****
      case 2: defaultFolder = ""; break;
      case 3: defaultFolder = Settings::interface_customfolder(); break;
    }
!     
    if(!collectionLoaded)
    {
      if(Settings::collection_folders().length() > 0)
--- 960,966 ----
      case 2: defaultFolder = ""; break;
      case 3: defaultFolder = Settings::interface_customfolder(); break;
    }
! 
    if(!collectionLoaded)
    {
      if(Settings::collection_folders().length() > 0)
***************
*** 979,985 ****
  	QDataStream in(&file);
  	in.setByteOrder(QDataStream::LittleEndian);
  	quint64 size=file.size ();
! 	quint64 hash=size; 
  	quint64 a;
  	for(int i = 0; i < 8192; i++) {
  		in >> a ; hash += a;
--- 979,985 ----
  	QDataStream in(&file);
  	in.setByteOrder(QDataStream::LittleEndian);
  	quint64 size=file.size ();
! 	quint64 hash=size;
  	quint64 a;
  	for(int i = 0; i < 8192; i++) {
  		in >> a ; hash += a;
***************
*** 1001,1007 ****
  void KMPCollectionThread::run()
  {
    if(QFile::exists(KGlobal::dirs()->localkdedir() + "share/apps/kmp/collection"))
!   { 
      loadDatabase();
      emit progressChanged(7, 0);
      //updateDatabase();
--- 1001,1007 ----
  void KMPCollectionThread::run()
  {
    if(QFile::exists(KGlobal::dirs()->localkdedir() + "share/apps/kmp/collection"))
!   {
      loadDatabase();
      emit progressChanged(7, 0);
      //updateDatabase();
***************
*** 1036,1042 ****
      if(currentFolder!="."&&currentFolder!="..")
      { result += getMediaFilesList(currentFolder); }
    }
!    
    return result;
  }
  
--- 1036,1042 ----
      if(currentFolder!="."&&currentFolder!="..")
      { result += getMediaFilesList(currentFolder); }
    }
! 
    return result;
  }
  
***************
*** 1160,1174 ****
        int albumID = -1;
        if(!currentMedia->Album().isEmpty())
        {
! 	for(int n = 0; n < albums->count(); n++)      
! 	{ if(albums->albums[n]->name.toLower() == currentMedia->Album().toLower() && albums->albums[n]->artist == artistID) { albumID = n; } }      
  	if(albumID == -1) { albumID = albums->count(); albums->append(new KMPAlbums::Album(currentMedia->Album(), artistID)); }
        }
        currentMedia->setArtist(QString::number(artistID));
        currentMedia->setAlbum(QString::number(albumID));
        processedItems ++;
        emit progressChanged(1, processedItems);
!     } 
      this->artists = artists;
      this->albums = albums;
      understandMediaItems();
--- 1160,1174 ----
        int albumID = -1;
        if(!currentMedia->Album().isEmpty())
        {
! 	for(int n = 0; n < albums->count(); n++)
! 	{ if(albums->albums[n]->name.toLower() == currentMedia->Album().toLower() && albums->albums[n]->artist == artistID) { albumID = n; } }
  	if(albumID == -1) { albumID = albums->count(); albums->append(new KMPAlbums::Album(currentMedia->Album(), artistID)); }
        }
        currentMedia->setArtist(QString::number(artistID));
        currentMedia->setAlbum(QString::number(albumID));
        processedItems ++;
        emit progressChanged(1, processedItems);
!     }
      this->artists = artists;
      this->albums = albums;
      understandMediaItems();
***************
*** 1193,1199 ****
        processedItems ++;
        emit progressChanged(2, processedItems);
      }
!     processedItems = 0;    
      emit progressChanged(-1, artists->count());
      foreach(KMPArtists::Artist* currentArtist, artists->artists)
      {
--- 1193,1199 ----
        processedItems ++;
        emit progressChanged(2, processedItems);
      }
!     processedItems = 0;
      emit progressChanged(-1, artists->count());
      foreach(KMPArtists::Artist* currentArtist, artists->artists)
      {
***************
*** 1212,1226 ****
        QString statement = "INSERT INTO albums (name,artist,pictureUrl,year) VALUES(";
  	  statement.append("'" + currentAlbum->name + "','" + QString::number(currentAlbum->artist) + "','',''");
  	  statement.append(");");
!       sqlite3_exec(collectionDB,statement.toLatin1(),NULL,NULL, &errmsg);  
!       processedItems ++;    
        emit progressChanged(4, processedItems);
      }
      if(albums->count()==0) emit progressChanged(4, 1);
      emit progressChanged(5);
      sqlite3_exec(collectionDB,"COMMIT TRANSACTION RESTOREPOINT;",NULL,NULL,NULL);
      loadDatabase();
!     emit progressChanged(6);  
  }
  
  void KMPCollectionThread::understandMediaItems()
--- 1212,1226 ----
        QString statement = "INSERT INTO albums (name,artist,pictureUrl,year) VALUES(";
  	  statement.append("'" + currentAlbum->name + "','" + QString::number(currentAlbum->artist) + "','',''");
  	  statement.append(");");
!       sqlite3_exec(collectionDB,statement.toLatin1(),NULL,NULL, &errmsg);
!       processedItems ++;
        emit progressChanged(4, processedItems);
      }
      if(albums->count()==0) emit progressChanged(4, 1);
      emit progressChanged(5);
      sqlite3_exec(collectionDB,"COMMIT TRANSACTION RESTOREPOINT;",NULL,NULL,NULL);
      loadDatabase();
!     emit progressChanged(6);
  }
  
  void KMPCollectionThread::understandMediaItems()
***************
*** 1228,1238 ****
    foreach(KMPMultimediaItem* currentItem, cMediaItems)
    {
      if(currentItem->Type() == 3)
!     { 
        for ( int n = 0; n < cMediaItems.length(); n++ )
        {
  	if(cMediaItems[n]->Type() == 2 && !cMediaItems[n]->Title().isEmpty() && cMediaItems[n]->Title()!="" && (currentItem->Title().startsWith(cMediaItems[n]->Title(), Qt::CaseInsensitive) || currentItem->Title().endsWith(cMediaItems[n]->Title(), Qt::CaseInsensitive)))
! 	{ 
  	  currentItem->setSubType(2);
  	  currentItem->setLinkedTo(n);
  	  if(currentItem->Album() == "-1") currentItem->setAlbum(cMediaItems[n]->Album());
--- 1228,1238 ----
    foreach(KMPMultimediaItem* currentItem, cMediaItems)
    {
      if(currentItem->Type() == 3)
!     {
        for ( int n = 0; n < cMediaItems.length(); n++ )
        {
  	if(cMediaItems[n]->Type() == 2 && !cMediaItems[n]->Title().isEmpty() && cMediaItems[n]->Title()!="" && (currentItem->Title().startsWith(cMediaItems[n]->Title(), Qt::CaseInsensitive) || currentItem->Title().endsWith(cMediaItems[n]->Title(), Qt::CaseInsensitive)))
! 	{
  	  currentItem->setSubType(2);
  	  currentItem->setLinkedTo(n);
  	  if(currentItem->Album() == "-1") currentItem->setAlbum(cMediaItems[n]->Album());
***************
*** 1367,1373 ****
     QDir dir(folder);
     QStringList files = dir.entryList(QDir::Files);
     foreach(QString CurrentFile, files)
!     { 
        CurrentFile = folder + "/" + CurrentFile;
        QString mimetype = KMimeType::findByPath(CurrentFile)->name();
        if((music && mimetype.contains("audio/")) || ( videos && (mimetype.contains("video/") || mimetype == "application/vnd.rn-realmedia")))
--- 1367,1373 ----
     QDir dir(folder);
     QStringList files = dir.entryList(QDir::Files);
     foreach(QString CurrentFile, files)
!     {
        CurrentFile = folder + "/" + CurrentFile;
        QString mimetype = KMimeType::findByPath(CurrentFile)->name();
        if((music && mimetype.contains("audio/")) || ( videos && (mimetype.contains("video/") || mimetype == "application/vnd.rn-realmedia")))
***************
*** 1378,1384 ****
  	if(mimetype.contains("audio/")) { NewMedia->setType(2); if(CurrentFile.endsWith(".wav", Qt::CaseInsensitive)) { NewMedia->setSubType(3); } }
  	else if(mimetype.contains("video/") || mimetype == "application/vnd.rn-realmedia") { NewMedia->setType(3); }
  	NewMedia->setURL(CurrentFile);
! 	TagLib::FileRef *F = new TagLib::FileRef(CurrentFile.toLocal8Bit());      
  	if ( !F->isNull() )
  	{
  	  NewMedia->setTagsAvailable(true);
--- 1378,1384 ----
  	if(mimetype.contains("audio/")) { NewMedia->setType(2); if(CurrentFile.endsWith(".wav", Qt::CaseInsensitive)) { NewMedia->setSubType(3); } }
  	else if(mimetype.contains("video/") || mimetype == "application/vnd.rn-realmedia") { NewMedia->setType(3); }
  	NewMedia->setURL(CurrentFile);
! 	TagLib::FileRef *F = new TagLib::FileRef(CurrentFile.toLocal8Bit());
  	if ( !F->isNull() )
  	{
  	  NewMedia->setTagsAvailable(true);
***************
*** 1444,1450 ****
  	cMediaItems.append(NewMedia);
        }
        else if(images && mimetype.contains("image/"))
!       {	
  	KMPMultimediaItem *NewMedia = new KMPMultimediaItem();
  	NewMedia->setType(1);
  	NewMedia->setTitle(QFileInfo(CurrentFile).fileName().section(".", 0, -2));
--- 1444,1450 ----
  	cMediaItems.append(NewMedia);
        }
        else if(images && mimetype.contains("image/"))
!       {
  	KMPMultimediaItem *NewMedia = new KMPMultimediaItem();
  	NewMedia->setType(1);
  	NewMedia->setTitle(QFileInfo(CurrentFile).fileName().section(".", 0, -2));
***************
*** 1474,1480 ****
  	QDataStream in(&file);
  	in.setByteOrder(QDataStream::LittleEndian);
  	quint64 size=file.size ();
! 	quint64 hash=size; 
  	quint64 a;
  	for(int i = 0; i < 8192; i++) {
  		in >> a ; hash += a;
--- 1474,1480 ----
  	QDataStream in(&file);
  	in.setByteOrder(QDataStream::LittleEndian);
  	quint64 size=file.size ();
! 	quint64 hash=size;
  	quint64 a;
  	for(int i = 0; i < 8192; i++) {
  		in >> a ; hash += a;
diff -crB KMP_original//src/kmpcollectionmodel.h KMP//src/kmpcollectionmodel.h
*** KMP_original//src/kmpcollectionmodel.h	2010-04-24 22:06:42.000000000 +0200
--- KMP//src/kmpcollectionmodel.h	2010-05-11 15:57:53.040439636 +0200
***************
*** 1,7 ****
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
!     
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
--- 1,7 ----
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
! 
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
***************
*** 20,32 ****
  #ifndef KMPCOLLECTIONMODEL_H
  #define KMPCOLLECTIONMODEL_H
  
! #include <qt4/QtCore/QModelIndex>
  
  
  class KMPCollectionModel : public QAbstractListModel
  {
    Q_OBJECT
!   public:    
      KMPCollectionModel(QObject* parent = 0);
      virtual QVariant data(const QModelIndex& index, int role = Qt::DisplayRole) const;
      virtual int rowCount(const QModelIndex& parent = QModelIndex()) const;
--- 20,32 ----
  #ifndef KMPCOLLECTIONMODEL_H
  #define KMPCOLLECTIONMODEL_H
  
! #include <QModelIndex>
  
  
  class KMPCollectionModel : public QAbstractListModel
  {
    Q_OBJECT
!   public:
      KMPCollectionModel(QObject* parent = 0);
      virtual QVariant data(const QModelIndex& index, int role = Qt::DisplayRole) const;
      virtual int rowCount(const QModelIndex& parent = QModelIndex()) const;
diff -crB KMP_original//src/kmpheadwidget.h KMP//src/kmpheadwidget.h
*** KMP_original//src/kmpheadwidget.h	2010-05-06 13:16:37.000000000 +0200
--- KMP//src/kmpheadwidget.h	2010-05-11 15:57:53.040439636 +0200
***************
*** 1,7 ****
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
!     
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
--- 1,7 ----
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
! 
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
***************
*** 20,26 ****
  #ifndef KMPHEADWIDGET_H
  #define KMPHEADWIDGET_H
  
! #include <qt4/QtGui/QWidget>
  #include <QPainter>
  #include <QTimer>
  #include <QPushButton>
--- 20,26 ----
  #ifndef KMPHEADWIDGET_H
  #define KMPHEADWIDGET_H
  
! #include <QWidget>
  #include <QPainter>
  #include <QTimer>
  #include <QPushButton>
***************
*** 61,68 ****
        //int mosx;
        //QPainter* Painter;
    protected:
!       virtual void mouseReleaseEvent(QMouseEvent* );      
!       //virtual void mouseMoveEvent(QMouseEvent* );      
        virtual void enterEvent(QEvent* );
        virtual void wheelEvent(QWheelEvent* );
        virtual void leaveEvent(QEvent* );
--- 61,68 ----
        //int mosx;
        //QPainter* Painter;
    protected:
!       virtual void mouseReleaseEvent(QMouseEvent* );
!       //virtual void mouseMoveEvent(QMouseEvent* );
        virtual void enterEvent(QEvent* );
        virtual void wheelEvent(QWheelEvent* );
        virtual void leaveEvent(QEvent* );
diff -crB KMP_original//src/kmpplaylistwidget.h KMP//src/kmpplaylistwidget.h
*** KMP_original//src/kmpplaylistwidget.h	2010-04-24 22:06:42.000000000 +0200
--- KMP//src/kmpplaylistwidget.h	2010-05-11 15:57:53.043772480 +0200
***************
*** 1,7 ****
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
!     
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
--- 1,7 ----
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
! 
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
***************
*** 20,26 ****
  #ifndef KMPPLAYLISTWIDGET_H
  #define KMPPLAYLISTWIDGET_H
  
! #include <qt4/QtGui/QScrollArea>
  #include <QVBoxLayout>
  #include <QList>
  #include <QListView>
--- 20,26 ----
  #ifndef KMPPLAYLISTWIDGET_H
  #define KMPPLAYLISTWIDGET_H
  
! #include <QScrollArea>
  #include <QVBoxLayout>
  #include <QList>
  #include <QListView>
***************
*** 41,47 ****
      QVBoxLayout *contents;
      QWidget *container;
  private:
! protected:    
      //virtual void paintEvent(QPaintEvent* );
  };
  
--- 41,47 ----
      QVBoxLayout *contents;
      QWidget *container;
  private:
! protected:
      //virtual void paintEvent(QPaintEvent* );
  };
  
diff -crB KMP_original//src/kmptextbrowser.h KMP//src/kmptextbrowser.h
*** KMP_original//src/kmptextbrowser.h	2010-04-24 22:06:42.000000000 +0200
--- KMP//src/kmptextbrowser.h	2010-05-11 15:57:53.043772480 +0200
***************
*** 27,33 ****
  #ifndef KMPTEXTBROWSER_H
  #define KMPTEXTBROWSER_H
  
! #include <qt4/QtGui/QTextBrowser>
  
  
  class KMPTextBrowser : public QTextBrowser
--- 27,33 ----
  #ifndef KMPTEXTBROWSER_H
  #define KMPTEXTBROWSER_H
  
! #include <QTextBrowser>
  
  
  class KMPTextBrowser : public QTextBrowser
diff -crB KMP_original//src/kmpvideooverlap.h KMP//src/kmpvideooverlap.h
*** KMP_original//src/kmpvideooverlap.h	2010-04-24 22:06:42.000000000 +0200
--- KMP//src/kmpvideooverlap.h	2010-05-11 15:57:53.050437191 +0200
***************
*** 1,7 ****
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
!     
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
--- 1,7 ----
  /*
      Copyright 2010 Gil Castro
      KDE Media Player is distributed under the terms of the GNU General Public License
! 
      This file is part of KDE Media Player.
  
      KDE Media Player is free software: you can redistribute it and/or modify  it
***************
*** 20,26 ****
  #ifndef KMPVIDEOOVERLAP_H
  #define KMPVIDEOOVERLAP_H
  
! #include <qt4/QtGui/QMainWindow>
  #include <QDropEvent>
  #include <QWidget>
  #include <KPushButton>
--- 20,26 ----
  #ifndef KMPVIDEOOVERLAP_H
  #define KMPVIDEOOVERLAP_H
  
! #include <QMainWindow>
  #include <QDropEvent>
  #include <QWidget>
  #include <KPushButton>
***************
*** 44,50 ****
       * Default Destructor
       */
      virtual ~KMPVideoOverlap();
!     
      void SetVideoValues(int b, int c, int h, int s);
      KMPVideoSettings *videoSettings;
      KMPAudioSettings *audioSettings;
--- 44,50 ----
       * Default Destructor
       */
      virtual ~KMPVideoOverlap();
! 
      void SetVideoValues(int b, int c, int h, int s);
      KMPVideoSettings *videoSettings;
      KMPAudioSettings *audioSettings;
